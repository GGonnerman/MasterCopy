https://adriann.github.io/programming_problems.html

// Wrtie a function that returns the largest element in a list.
// Write a function that reverses a list, preferably in place.
// Write a function that checks whether an element occurs in a list.
// Write a function that returns the elements on odd positions in a list.
// Write a function that computes the running total of a list.
// Write a function that tests whether a string is a palindrome.
// Write three functions that compute the sum of the numbers in a list: using a for-loop, a while-loop and recursion
// Write a function on_all that applies a function to every element of a list. Use it to print the first twenty perfect squares. 
/* The perfect squares can be found by multiplying each natural number with itself. 
The first few perfect squares are 1*1= 1, 2*2=4, 3*3=9, 4*4=16. 
Twelve for example is not a perfect square because there is no natural number m so that m*m=12.*/
// Write a function that concatenates two lists. [a,b,c], [1,2,3] → [a,b,c,1,2,3]
// Write a function that combines two lists by alternatingly taking elements, e.g. [a,b,c], [1,2,3] → [a,1,b,2,c,3].
// Write a function that merges two sorted lists into a new sorted list. [1,4,6],[2,3,5] → [1,2,3,4,5,6]. You can do this quicker than concatenating them followed by a sort.
// Write a function that rotates a list by k elements. For example [1,2,3,4,5,6] rotated by two becomes [3,4,5,6,1,2]. Try solving this without creating a copy of the list. How many swap or move operations do you need?
// Write a function that computes the list of the first 100 Fibonacci numbers. The first two Fibonacci numbers are 1 and 1. The n+1-st Fibonacci number can be computed by adding the n-th and the n-1-th Fibonacci number. The first few are therefore 1, 1, 1+1=2, 1+2=3, 2+3=5, 3+5=8.
// Write a function that takes a number and returns a list of its digits. So for 2342 it should return [2,3,4,2].